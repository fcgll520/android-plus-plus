
Prerequisites:

 - Android SDK (http://developer.android.com/sdk/)
   * Please avoid installing to a path which contains spaces.

 - Android NDK (https://developer.android.com/tools/sdk/ndk/)
   * Please avoid installing to a path which contains spaces.
   * Compatibility tested with NDK r9d, r10, r10b, r10c and r10d.

 - Java Development Kit (JDK) 1.7 or 1.8
   * If using JDK 1.7, please ensure you are using a revision of at least 67. 
   * If using JDK 1.8, please ensure you are using a revision of at least 21. 
   * Early revisions of JDK 1.7 tend to cause devices to hang when debugging.

--------------------------------------------------------------------------------------------------------------------------------

Installation:

  1) Create several new environment variables to reference installations of the SDK, NDK, and JDK.
      a) Open your computer's 'Control Panel'.
      b) If viewing items by category, follow 'System and Security' -> 'System'.
         If viewing items by icon, just click 'System'.
      c) Click 'Advanced System Settings' (left panel). This should open a 'System Properties' dialog.
      d) Select the 'Advanced' tab, and click 'Environment Variables'.
      e) Add the following new user or system variables:
          ANDROID_SDK  <path_to_sdk_root>
          ANDROID_NDK  <path_to_ndk_root>
          JAVA_HOME    <path_to_java_jdk_root>

  2) Close all instances of Visual Studio and any Command Prompt windows.

  3) Bootstrap for one (or more) instances of Visual Studio using the 'bootstrap_vs*.cmd' scripts in Android++'s root.
      - Scripts are separated by version to allow for improved customisation/testing.
      - More advanced scripts can be found in the './bootstrap/' directory. These allow more fine grain control.
      - Installation of Visual Studio extensions in is a little unpredictable, be sure to uninstall any existing
        registered extensions before upgrading. Look in './bootstrap/' for these scripts.
      - Improved automation of the upgrade process will follow in later releases.

  4) Build a sample. See below.

--------------------------------------------------------------------------------------------------------------------------------

Building and running 'hello-gdbserver' sample:

  1) Find bundled projects located under './msbuild/samples' from the root of your Android++ installation.

  2) For ease, you can use the 'Samples_vs*.cmd' batch files to load the solution in your chosen VS version.
  
  3) Build the 'hello-gdbserver' project.
       - 'hello-gdbserver' is a tiny application to force a segmentation fault. This should be picked up by the debugger.

  4) Ensure 'hello-gdbserver' is set as the launch project. This is indicated by the project name being represented in bold.
       - If it's not bold, right-click the project in the 'Solution Explorer' pane and select 'Set as StartUp Project'.

  5) Run the project. Press F5 or select 'Debug -> Start Debugging'.

  6) A 'Configuring Android++' dialog should appear. Installation and connection status can be monitored here.
      - A 'Waiting for Debugger' prompt should also appear on the device. When this disappears, JDB has successfully connected.
      - As the ADB protocol is slow, installation times can be lengthy for large APKs - and vary with target device.
      - If you experience any errors, please first consult './docs/troubleshooting.txt'.

  7) Wait for connection to be finalised. On device you should see a large button labelled 'Induce Crash'. Press it.

  8) Visual Studio should alert you that a 'Segmentation Fault' has occurred. Click 'Break' to see its location in native code.
